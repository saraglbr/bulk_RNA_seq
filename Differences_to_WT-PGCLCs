
#Comparison of day 6 TKO PGCLCs +/- cytokines to day 6 wild type PGCLCs 

#Load libraries
library (DESeq2)
library(limma)
library(EnhancedVolcano)
library("ggVennDiagram")
library(org.Mm.eg.db)
library(clusterProfiler)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(enrichplot)
library(dendextend)
library(ggpattern)
library(reshape)

#Load data and select only differentiated samples //////////////////// 
```{r}
setwd("~/phd/Bulk_RNA/TKO_NO_CYT/")
count_all <- read.csv("count_matrix_all.csv", row.names=1)
count_diff <- count_all[!grepl("epilc", names(count_all))]
colTable <- read.csv ("exp_desing.csv", sep=",", header = 1, row.names = 1)
colTable_diff <- colTable[!colTable$stage=="epilc", ]
```

#Run deseq2 on diffrentiated samples only  ////////////////////
```{r}
count_sample <- count_diff
colTable <- colTable_diff

colTable$combined_conditions <- with(colTable, paste(line, stage, cytokines, sep = ":"))

colTable <- colTable[ , c("stage", "combined_conditions")]

count_sample[is.na(count_sample)] <- 0 # set any NA values to 0
dds <- DESeqDataSetFromMatrix(countData= count_sample, 
                              colData=colTable, design= ~ combined_conditions)
dds 

notAllZero <- (rowSums(counts(dds))>10) 
dds <- dds[notAllZero,]
dds #sum of counts across all samples higher than 10 -> 18678

#Stablish Tg2a_no_cyt as control and run deseq2
as.data.frame( colData(dds) )
dds_result <- DESeq(dds)

dds_diff <- dds_result


#Extract expression data (log transform and save as expression)
rld_diff <- rlog(dds_diff, blind=TRUE)
expression_diff <- as.data.frame((assay(rld_diff)))

```


#Pairwise comparisons against WT no cytokines (D6 NO PGCLC)  ////////////////////

##Create a function called pairwise comparison that generates and saves to relevant directory: 
	#1) Table of differentially expressed genes 
	#2) Volcano plot
	#3) Talbes of GO enrichment results of genes up and down regulated 
	#4) Plot of top 10 GO enrichment results of genes up and down regulated  

pairwise_comparison <- function(sample_test, sample_control, tit, name) {
  
  # Automatically generate file names based on the base name
  file_name <- paste(name, ".csv", sep = "")
  volcano_name <- paste(name, ".pdf", sep = "")
  GO_name_up <- paste("GO_UP_", name, ".csv", sep = "")
  GO_name_DOWN <- paste("GO_DOWN_", name, ".csv", sep = "")
  GO_plot_up <- paste("GO_plot_UP_", name, ".pdf", sep = "")
  GO_plot_DOWN <- paste("GO_plot_DOWN_", name, ".pdf", sep = "")

  # Directories (hardcoded/stable)
  working_dir_DEGs <- "~/phd/Bulk_RNA/TKO_NO_CYT/analysis/DEGs/"
  working_dir_volcano <- "~/phd/Bulk_RNA/TKO_NO_CYT/analysis/volcanos/"
  working_dir_GO <- "~/phd/Bulk_RNA/TKO_NO_CYT/analysis/GO/"
  working_dir_GO_plots <- "~/phd/Bulk_RNA/TKO_NO_CYT/analysis/GO/plots/"

  # Make contrast of specific samples
  cont_resuls <- results(dds_diff, contrast = c("combined_conditions", sample_test, sample_control), 
                         lfcThreshold = 0.5)

  # Count all up and downregulated genes
  upregulated_genes <- sum(cont_resuls$log2FoldChange > 2 & cont_resuls$padj < 0.05 & complete.cases(cont_resuls))
  downregulated_genes <- sum(cont_resuls$log2FoldChange < -2 & cont_resuls$padj < 0.05 & complete.cases(cont_resuls))

  # Order the results by ascending p-value and select top 15 genes
  cont_resuls_ordered <- cont_resuls[order(cont_resuls$padj), ]
  top_genes <- rownames(head(cont_resuls_ordered, 40))

  # Create the volcano plot
  volcano <- EnhancedVolcano(cont_resuls,
    lab = NA,  # rownames(cont_resuls),
    x = 'log2FoldChange',
    y = 'padj',
    title = tit,
    xlim = c(-15, 15),
    ylim = c(0, 200),
    FCcutoff = 1.5,
    pCutoff = 0.05,
    pointSize = 7.0,
    widthConnectors = 0.0055,
    colConnectors = 'black',
    col = c('black', 'black', 'black', "cyan3")
  ) + 
  theme(plot.title = element_text(size = 65),
        plot.subtitle = element_text(size = 0),
        axis.text.x = element_text(size = 52),
        axis.text.y = element_text(size = 52),
        axis.title = element_text(size = 55),
        legend.text = element_text(size = 0)) + 
  annotate("text", x = +15, y = 200, label = paste("Up:", upregulated_genes),
           hjust = 1, vjust = 0, size = 17) +
  annotate("text", x = -15, y = 200, label = paste("Down:", downregulated_genes),
           hjust = 0, vjust = 0, size = 17)

  # Plot volcano
  print(volcano)

  # Save DEGs and volcano plot
  setwd(working_dir_DEGs)
  write.csv(cont_resuls, file = file_name, quote = FALSE)

  setwd(working_dir_volcano)
  pdf(volcano_name, width = 15, height = 15)
  print(volcano)
  dev.off()

  # GO enrichment
  genes_up <- rownames(cont_resuls[cont_resuls$log2FoldChange > 2 & cont_resuls$padj < 0.05 & complete.cases(cont_resuls), ])
  genes_down <- rownames(cont_resuls[cont_resuls$log2FoldChange < -2 & cont_resuls$padj < 0.05 & complete.cases(cont_resuls), ])

  entrez_up <- bitr(genes_up, fromType = "SYMBOL", toType = c("ENTREZID"), OrgDb = org.Mm.eg.db)
  entrez_down <- bitr(genes_down, fromType = "SYMBOL", toType = c("ENTREZID"), OrgDb = org.Mm.eg.db)

  enrichment_up <- enrichGO(gene = entrez_up$ENTREZID, OrgDb = org.Mm.eg.db, readable = T, ont = "BP",
                            pvalueCutoff = 0.05, qvalueCutoff = 0.10)
  enrichment_down <- enrichGO(gene = entrez_down$ENTREZID, OrgDb = org.Mm.eg.db, readable = T, ont = "BP",
                              pvalueCutoff = 0.05, qvalueCutoff = 0.10)

  setwd(working_dir_GO)
  write.csv(enrichment_up, file = GO_name_up, quote = FALSE)
  write.csv(enrichment_down, file = GO_name_DOWN, quote = FALSE)

  # Plot GO enrichment
  setwd(working_dir_GO_plots)
  pdf(GO_plot_up, width = 19, height = 12)
  enrichment_up2 <- pairwise_termsim(enrichment_up)
  treeplot(enrichment_up2)
  dev.off()

  pdf(GO_plot_DOWN, width = 19, height = 12)
  enrichment_down2 <- pairwise_termsim(enrichment_down)
  treeplot(enrichment_down2)
  dev.off()

  # Save bar plots
  pdf(paste0("bar_", GO_plot_up))
  barplot(enrichment_up, showCategory = 10)
  dev.off()

  down <- barplot(enrichment_down, showCategory = 10)

  pdf(paste0("bar_", GO_plot_DOWN))
  down
  dev.off()
}
```

#Use this function to do pairwise comparisons /////////
```{r fig.height=15 , fig.width=15}
#TKO + cyt vs WT PGCLCs 
pairwise_comparison(
	sample_test <- "TKO:D6:yes"
  sample_control <- "tg2a:D6:yes"
  tit <- "Day 6 TKO +cyt vs WT PGCLCs"
	name = "D6_TKOscyt_Tg2acyt"
)
#TKO + cyt vs WT PGCLCs 
pairwise_comparison(
  sample_test <- "TKO:D6:no"
  sample_control <- "tg2a:D6:yes"
  tit <- "Day 6 TKO no cyt vs WT PGCLCs"
	name = "D6_TKOnocyt_Tg2acyt"
)
```

#Check overlap between dysregulated genes in TKO+ and TKO-cyt

#Load differentially expressed genes 
setwd("~/phd//Bulk_RNA/TKO_NO_CYT/analysis/DEGs/")
tkocyt <- read.csv("D6_TKOscyt_Tg2acyt.csv", row.names=1)
tkonocyt <- read.csv("D6_TKOnocyt_Tg2acyt.csv", row.names=1)

# Subset the data and filter rows based on conditions
tkocyt <- subset(tkocyt, padj != "NA" & padj < 0.05)
tkonocyt <- subset(tkonocyt, padj != "NA" & padj < 0.05)

tkocyt <- as.vector(rownames(subset(tkocyt, log2FoldChange > 2| log2FoldChange< -2  )))
tkonocyt <- as.vector(rownames(subset(tkonocyt, log2FoldChange > 2 | log2FoldChange< -2  )))

#Generate a ven diagram 
all_diff <- list(tkonocyt ,tkocyt)
plot <- ggVennDiagram(all_diff, label_alpha = 0,
              category.names = c("tkonocyt" , "tkocyt"),
              set_color = c("green", "darkgreen"),
              label_size = 4) +
  scale_color_manual(values = c("green", "darkgreen")) +
      ggplot2::scale_fill_gradient(low="honeydew",high = "mediumpurple3")+
      scale_x_continuous(expand = expansion(mult = .2))
plot



#Categorize all dysregulated genes into four different categories by hierarchical clustering \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

```{r fig.width=5, fig.height=5}
#Get log normalized reads and subset dataframe using dysregulated genes
counts_norm <- as.data.frame((assay(rld)))
cols <- c("tg2a_no_cyt_D6_1","tg2a_no_cyt_D6_2", "tg2a_cyt_D6_1", "tg2a_cyt_D6_2" ,     "TKO_NO_CYT_D6_1",          "TKO_NO_CYT_D6_2" ,           "tko_D6_2" ,  "tko_D6_1" )
counts_norm$gene <- row.names(counts_norm)
all_diff <- unlist(all_diff)
significant_subset <- subset(counts_norm, counts_norm$gene %in% all_diff)
significant_subset <- subset(significant_subset, select = -c(gene)) 

#Carry out hierarchical clustering and then cut tree to separate into only 4 groups
my_hclust_gene <- hclust(dist(significant_subset), method = "complete") 
as.dendrogram(my_hclust_gene) %>%
    plot(horiz = TRUE)
my_gene_col <- cutree(tree = as.dendrogram(my_hclust_gene), k = 4)
my_gene_col <- as.data.frame(my_gene_col)

#Plot dendogram and colour 4 main branches
my_colour = list(
      my_gene_col = c("1" = "cornflowerblue", "2" = "pink", "3" = "seagreen","4" = "red" ))

dend <- as.dendrogram(my_hclust_gene)
dend <- dend %>%
          color_branches(k = 4, col = my_colour)
plot(dend)


#Check expression pattern of genes in each cluster generated through hierarchical clustering
#Separate genes into 4 groupw depending on the assigned hierarchical cluster 
```{r}
my_gene_col <- as.data.frame(my_gene_col)
my_gene_col$gene <- rownames(my_gene_col)
cluster1 <- rownames(my_gene_col[my_gene_col$my_gene_col==1, ])
cluster2 <- rownames(my_gene_col[my_gene_col$my_gene_col==2, ])
cluster3 <- rownames(my_gene_col[my_gene_col$my_gene_col==3, ])
cluster4 <- rownames(my_gene_col[my_gene_col$my_gene_col==4, ])

setwd("~/phd/thesis_figures/TKO_chapter/panels/D6_only/")
write.csv(my_gene_col, "TKO_vs_WT_clusters_all.csv")
```



```{r height=10, widht =5}
#Calculate Z scores for all genes
counts_norm <- counts_norm %>%
    mutate(
      mean_log = rowMeans(.),
      sd_log = apply(., 1, sd, na.rm = TRUE)
    )
counts_norm <- counts_norm %>%
    mutate(across(1:8, ~ (. - counts_norm$mean_log) / counts_norm$sd_log))
  counts_norm <- counts_norm[ ,1:8]



#Subset to only contain significant genes 
counts_norm$gene <- row.names(counts_norm)
significant_subset <- subset(counts_norm, counts_norm$gene %in% all_diff)
#significant_subset <- subset(significant_subset, select = -c(gene)) 
my_gene_col$gene <- rownames(my_gene_col)
#Merge Z-score dataframe with the dataframe containing the clustering information
boxplot_data <- merge(significant_subset, my_gene_col, by="gene")

#Adapt data format for easier plotting with ggplot2
boxplot_data <- melt_data <- melt(boxplot_data, id = c("gene","my_gene_col")) 
boxplot_data$variable <- as.character(boxplot_data$variable)
remove_last_n <- 2
substr(boxplot_data$variable, 1, nchar(boxplot_data$variable) - remove_last_n)
boxplot_data <- boxplot_data %>%
  mutate(sample = substr(boxplot_data$variable, 1, nchar(boxplot_data$variable) - remove_last_n))

#Plot and save boxplot of each cluster 
setwd("~/phd/thesis_figures/TKO_chapter/panels/D6_only")
pdf("WT_vs_TKO_boxplots_Zscore.pdf", height=5, width=10)
ggplot(boxplot_data, aes(x=sample, y = value, fill=sample)) +
  geom_boxplot()+
  #geom_violin()+
  facet_wrap(~my_gene_col, nrow = 1,  ncol = 4, scales = "fixed")+
  scale_fill_manual(values = c("tg2a_cyt_D6" = "red2", "tg2a_no_cyt_D6" = "coral", "tko_D6" = "blue", "TKO_NO_CYT_D6" = "cyan"))+
   scale_x_discrete(limits=c("tg2a_no_cyt_D6", "tg2a_cyt_D6",
                             "TKO_NO_CYT_D6", "tko_D6"))+
    theme_light() 
dev.off

```







